#lang racket

(require se3-bib/flaggen-module)
(require racket/gui/base)

(define buchstabiertafel (list (cons #\A 'Alpha)
                               (cons #\B 'Bravo)
                               (cons #\C 'Charlie)
                               (cons #\D 'Delta)
                               (cons #\E 'Echo)
                               (cons #\F 'Foxtrot)
                               (cons #\G 'Golf)
                               (cons #\H 'Hotel)
                               (cons #\I 'India)
                               (cons #\J 'Juliet)
                               (cons #\K 'Kilo)
                               (cons #\L 'Lima)
                               (cons #\M 'Mike)
                               (cons #\N 'November)
                               (cons #\O 'Oscar)
                               (cons #\P 'Papa)
                               (cons #\Q 'Quebec)
                               (cons #\R 'Romeo)
                               (cons #\S 'Sierra)
                               (cons #\T 'Tango)
                               (cons #\U 'Uniform)
                               (cons #\V 'Viktor)
                               (cons #\W 'Whiskey)
                               (cons #\X 'X-ray)
                               (cons #\Y 'Yankee)
                               (cons #\Z 'Zulu)
                               (cons #\0 'Nadazero)
                               (cons #\1 'Unaone)
                               (cons #\2 'Duotwo)
                               (cons #\3 'Terrathree)
                               (cons #\4 'Carrefour)
                               (cons #\5 'Pentafive)
                               (cons #\6 'Soxisix)
                               (cons #\7 'Setteseven)
                               (cons #\8 'Oktoeight)
                               (cons #\9 'Novonine)
                               (cons #\, 'Decimal)
                               (cons #\. 'Stop)))

(define flaggentafel (list (cons #\A A)
                           (cons #\B B)
                           (cons #\C C)
                           (cons #\D D)
                           (cons #\E E)
                           (cons #\F F)
                           (cons #\G G)
                           (cons #\H H)
                           (cons #\I I)
                           (cons #\J J)
                           (cons #\K K)
                           (cons #\L L)
                           (cons #\M M)
                           (cons #\N N)
                           (cons #\O O)
                           (cons #\P P)
                           (cons #\Q Q)
                           (cons #\R R)
                           (cons #\S S)
                           (cons #\T T)
                           (cons #\U U)
                           (cons #\V V)
                           (cons #\W W)
                           (cons #\X X)
                           (cons #\Y Y)
                           (cons #\Z Z)
                           (cons #\0 Z0)
                           (cons #\1 Z1)
                           (cons #\2 Z2)
                           (cons #\3 Z3)
                           (cons #\4 Z4)
                           (cons #\5 Z5)
                           (cons #\6 Z6)
                           (cons #\7 Z7)
                           (cons #\8 Z8)
                           (cons #\9 Z9)))

;assigns our datastructure to a new variable. There are three kinds of assignments available now : buchstabiertafel, flaggentafel, ... 
(define tafel buchstabiertafel)

;adds an element to a given list
(define (addElement givenList element)
  (append givenList (list element)))

;remove the first element of a given list
(define (removeFirstElement givenList)
  (cdr givenList))

;returns the value for a given key from our cons datastructure (like a HashMap) 
(define (getKeyValue key)
  (cdr (assoc key tafel)))

;returns a code made of our input string with the specific "tafel" datastructure
(define (getValueText keyText)
(let ([resultList '()]
      [keyTextList (string->list keyText)])
  (flatten (convertValueText keyTextList resultList))))

;recursice helper function to generate the key value for each character in the string
(define (convertValueText keyTextList resultList)
  (if (= 0 (length keyTextList))
      '()
      (addElement (addElement resultList (getKeyValue (car keyTextList)))
                  (convertValueText (removeFirstElement keyTextList) resultList)) ))

;sample output
(getValueText "HELLO.WORLD")
